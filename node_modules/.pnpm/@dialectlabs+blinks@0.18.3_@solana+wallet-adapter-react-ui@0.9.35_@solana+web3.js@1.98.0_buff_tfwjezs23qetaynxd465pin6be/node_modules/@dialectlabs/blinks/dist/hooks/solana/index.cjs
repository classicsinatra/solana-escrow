"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }// src/hooks/solana/useActionSolanaWalletAdapter.ts




var _blinkscore = require('@dialectlabs/blinks-core');
var _walletadapterreact = require('@solana/wallet-adapter-react');
var _walletadapterreactui = require('@solana/wallet-adapter-react-ui');
var _web3js = require('@solana/web3.js');
var _bs58 = require('bs58'); var _bs582 = _interopRequireDefault(_bs58);
var _react = require('react');

// src/utils/base64.ts
var decodeBase64 = (str) => {
  const binary = atob(str);
  const bytes = new Uint8Array(new ArrayBuffer(binary.length));
  const half = binary.length / 2;
  for (let i = 0, j = binary.length - 1; i <= half; i++, j--) {
    bytes[i] = binary.charCodeAt(i);
    bytes[j] = binary.charCodeAt(j);
  }
  return bytes;
};

// src/hooks/solana/useActionSolanaWalletAdapter.ts
function useActionSolanaWalletAdapter(rpcUrlOrConnection) {
  const wallet = _walletadapterreact.useWallet.call(void 0, );
  const walletModal = _walletadapterreactui.useWalletModal.call(void 0, );
  const finalConnection = _react.useMemo.call(void 0, () => {
    return typeof rpcUrlOrConnection === "string" ? new (0, _web3js.Connection)(rpcUrlOrConnection, "confirmed") : rpcUrlOrConnection;
  }, [rpcUrlOrConnection]);
  const adapter = _react.useMemo.call(void 0, () => {
    function verifySignDataValidity(data, opts) {
      if (typeof data === "string") {
        return true;
      }
      const errors = _blinkscore.verifySignMessageData.call(void 0, data, opts);
      if (errors.length > 0) {
        console.warn(
          `[@dialectlabs/blinks] Sign message data verification error: ${errors.join(", ")}`
        );
      }
      return errors.length === 0;
    }
    return new (0, _blinkscore.ActionConfig)(finalConnection, {
      connect: async () => {
        try {
          await wallet.connect();
        } catch (e2) {
          walletModal.setVisible(true);
          return null;
        }
        return _nullishCoalesce(_optionalChain([wallet, 'access', _ => _.publicKey, 'optionalAccess', _2 => _2.toBase58, 'call', _3 => _3()]), () => ( null));
      },
      signTransaction: async (txData) => {
        try {
          const tx = await wallet.sendTransaction(
            _web3js.VersionedTransaction.deserialize(decodeBase64(txData)),
            finalConnection
          );
          return { signature: tx };
        } catch (e3) {
          return { error: "Signing failed." };
        }
      },
      signMessage: async (data) => {
        if (!wallet.signMessage || !wallet.publicKey) {
          return { error: "Signing failed." };
        }
        try {
          const isSignDataValid = verifySignDataValidity(data, {
            expectedAddress: wallet.publicKey.toString()
          });
          if (!isSignDataValid) {
            return { error: "Signing failed." };
          }
          const text = typeof data === "string" ? data : _blinkscore.createSignMessageText.call(void 0, data);
          const encoded = new TextEncoder().encode(text);
          const signed = await wallet.signMessage(encoded);
          const encodedSignature = _bs582.default.encode(signed);
          return { signature: encodedSignature };
        } catch (e) {
          return { error: "Signing failed." };
        }
      }
    });
  }, [finalConnection, wallet, walletModal]);
  return { adapter };
}


exports.useActionSolanaWalletAdapter = useActionSolanaWalletAdapter;
