"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }

var _chunkH5G6IAZUcjs = require('../chunk-H5G6IAZU.cjs');

// src/ext/twitter.tsx











var _blinkscore = require('@dialectlabs/blinks-core');
var _client = require('react-dom/client');
var _jsxruntime = require('react/jsx-runtime');
var noop = () => {
};
var DEFAULT_OPTIONS = {
  securityLevel: "only-trusted",
  supportStrategy: _blinkscore.defaultActionSupportStrategy
};
var normalizeOptions = (options) => {
  return {
    ...DEFAULT_OPTIONS,
    ...options,
    securityLevel: (() => {
      if (!options.securityLevel) {
        return {
          websites: DEFAULT_OPTIONS.securityLevel,
          interstitials: DEFAULT_OPTIONS.securityLevel,
          actions: DEFAULT_OPTIONS.securityLevel
        };
      }
      if (typeof options.securityLevel === "string") {
        return {
          websites: options.securityLevel,
          interstitials: options.securityLevel,
          actions: options.securityLevel
        };
      }
      return options.securityLevel;
    })()
  };
};
function setupTwitterObserver(config, callbacks = {}, options = DEFAULT_OPTIONS) {
  const mergedOptions = normalizeOptions(options);
  const twitterReactRoot = document.getElementById("react-root");
  const refreshRegistry = async () => {
    return _blinkscore.ActionsRegistry.getInstance().init();
  };
  refreshRegistry().then(() => {
    const observer = new MutationObserver((mutations) => {
      for (let i = 0; i < mutations.length; i++) {
        const mutation = mutations[i];
        for (let j = 0; j < mutation.addedNodes.length; j++) {
          const node = mutation.addedNodes[j];
          if (node.nodeType !== Node.ELEMENT_NODE) {
            return;
          }
          handleNewNode(
            node,
            config,
            callbacks,
            mergedOptions
          ).catch(noop);
        }
      }
    });
    observer.observe(twitterReactRoot, { childList: true, subtree: true });
  });
}
async function handleNewNode(node, config, callbacks, options) {
  const element = node;
  if (!element || element.localName !== "div") {
    return;
  }
  let anchor;
  const linkPreview = findLinkPreview(element);
  let container = findContainerInTweet(
    _nullishCoalesce(_optionalChain([linkPreview, 'optionalAccess', _ => _.card]), () => ( element)),
    Boolean(linkPreview)
  );
  if (linkPreview) {
    anchor = linkPreview.anchor;
    container && container.remove();
    container = linkPreview.card.parentElement;
  } else {
    if (container) {
      return;
    }
    const link = findLastLinkInText(element);
    if (link) {
      anchor = link.anchor;
      container = getContainerForLink(link.tweetText);
    }
  }
  if (!anchor || !container) return;
  const shortenedUrl = anchor.href;
  const actionUrl = await resolveTwitterShortenedUrl(shortenedUrl);
  const interstitialData = _blinkscore.isInterstitial.call(void 0, actionUrl);
  let actionApiUrl;
  if (interstitialData.isInterstitial) {
    const interstitialState = _blinkscore.getExtendedInterstitialState.call(void 0, 
      actionUrl.toString()
    );
    if (!_blinkscore.checkSecurity.call(void 0, interstitialState, options.securityLevel.interstitials)) {
      return;
    }
    actionApiUrl = interstitialData.decodedActionUrl;
  } else {
    const websiteState = _blinkscore.getExtendedWebsiteState.call(void 0, actionUrl.toString());
    if (!_blinkscore.checkSecurity.call(void 0, websiteState, options.securityLevel.websites)) {
      return;
    }
    const actionsJsonUrl = actionUrl.origin + "/actions.json";
    const { url: proxyUrl, headers: proxyHeaders } = _blinkscore.proxify.call(void 0, actionsJsonUrl);
    const actionsJson = await fetch(proxyUrl, {
      headers: proxyHeaders
    }).then((res) => res.json());
    const actionsUrlMapper = new (0, _blinkscore.ActionsURLMapper)(actionsJson);
    actionApiUrl = actionsUrlMapper.mapUrl(actionUrl);
  }
  const state = actionApiUrl ? _blinkscore.getExtendedActionState.call(void 0, actionApiUrl) : null;
  if (!actionApiUrl || !state || !_blinkscore.checkSecurity.call(void 0, state, options.securityLevel.actions)) {
    return;
  }
  const action = await _blinkscore.Action.fetch(
    actionApiUrl,
    options.supportStrategy
  ).catch(noop);
  if (!action) {
    return;
  }
  const { container: actionContainer, reactRoot } = createAction({
    config,
    originalUrl: actionUrl,
    action,
    callbacks,
    options,
    isInterstitial: interstitialData.isInterstitial
  });
  addStyles(container).replaceChildren(actionContainer);
  new MutationObserver((mutations, observer) => {
    for (const mutation of mutations) {
      for (const removedNode of Array.from(mutation.removedNodes)) {
        if (removedNode === actionContainer || !document.body.contains(actionContainer)) {
          reactRoot.unmount();
          observer.disconnect();
        }
      }
    }
  }).observe(document.body, { childList: true, subtree: true });
}
function createAction({
  originalUrl,
  action,
  callbacks,
  options,
  config
}) {
  const container = document.createElement("div");
  container.className = "dialect-action-root-container";
  const actionRoot = _client.createRoot.call(void 0, container);
  actionRoot.render(
    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { onClick: (e) => e.stopPropagation(), children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      _chunkH5G6IAZUcjs.Blink,
      {
        adapter: config,
        stylePreset: resolveXStylePreset(),
        action,
        websiteUrl: originalUrl.toString(),
        websiteText: originalUrl.hostname,
        callbacks,
        securityLevel: options.securityLevel
      }
    ) })
  );
  return { container, reactRoot: actionRoot };
}
var resolveXStylePreset = () => {
  const colorScheme = _optionalChain([document, 'access', _2 => _2.querySelector, 'call', _3 => _3("html"), 'optionalAccess', _4 => _4.style, 'access', _5 => _5.colorScheme]);
  if (colorScheme) {
    return colorScheme === "dark" ? "x-dark" : "x-light";
  }
  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
  return prefersDark ? "x-dark" : "x-light";
};
async function resolveTwitterShortenedUrl(shortenedUrl) {
  const res = await fetch(shortenedUrl);
  const html = await res.text();
  const parser = new DOMParser();
  const doc = parser.parseFromString(html, "text/html");
  const actionUrl = _optionalChain([doc, 'access', _6 => _6.querySelector, 'call', _7 => _7("title"), 'optionalAccess', _8 => _8.textContent]);
  return new URL(actionUrl);
}
function findElementByTestId(element, testId) {
  if (_optionalChain([element, 'access', _9 => _9.attributes, 'access', _10 => _10.getNamedItem, 'call', _11 => _11("data-testid"), 'optionalAccess', _12 => _12.value]) === testId) {
    return element;
  }
  return element.querySelector(`[data-testid="${testId}"]`);
}
function findContainerInTweet(element, searchUp) {
  const message = searchUp ? _nullishCoalesce(element.closest(`[data-testid="tweet"]`), () => ( element.closest(`[data-testid="messageEntry"]`))) : _nullishCoalesce(findElementByTestId(element, "tweet"), () => ( findElementByTestId(element, "messageEntry")));
  if (message) {
    return message.querySelector(".dialect-wrapper");
  }
  return null;
}
function findLinkPreview(element) {
  const card = findElementByTestId(element, "card.wrapper");
  if (!card) {
    return null;
  }
  const anchor = _optionalChain([card, 'access', _13 => _13.children, 'access', _14 => _14[0], 'optionalAccess', _15 => _15.children, 'access', _16 => _16[0]]);
  return anchor ? { anchor, card } : null;
}
function findLastLinkInText(element) {
  const tweetText = findElementByTestId(element, "tweetText");
  if (!tweetText) {
    return null;
  }
  const links = tweetText.getElementsByTagName("a");
  if (links.length > 0) {
    const anchor = links[links.length - 1];
    return { anchor, tweetText };
  }
  return null;
}
function getContainerForLink(tweetText) {
  const root = document.createElement("div");
  root.className = "dialect-wrapper";
  const dm = tweetText.closest(`[data-testid="messageEntry"]`);
  if (dm) {
    root.classList.add("dialect-dm");
    _optionalChain([tweetText, 'access', _17 => _17.parentElement, 'optionalAccess', _18 => _18.parentElement, 'optionalAccess', _19 => _19.prepend, 'call', _20 => _20(root)]);
  } else {
    _optionalChain([tweetText, 'access', _21 => _21.parentElement, 'optionalAccess', _22 => _22.append, 'call', _23 => _23(root)]);
  }
  return root;
}
function addStyles(element) {
  if (element && element.classList.contains("dialect-wrapper")) {
    element.style.marginTop = "12px";
    if (element.classList.contains("dialect-dm")) {
      element.style.marginBottom = "8px";
      element.style.width = "100%";
      element.style.minWidth = "350px";
    }
  }
  return element;
}


exports.setupTwitterObserver = setupTwitterObserver;
