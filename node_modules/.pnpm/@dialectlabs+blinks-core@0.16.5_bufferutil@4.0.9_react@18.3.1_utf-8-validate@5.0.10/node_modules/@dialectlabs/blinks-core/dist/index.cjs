"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; } var _class; var _class2; var _class3; var _class4; var _class5;// src/utils/caip-2.ts
var BlockchainIds = {
  SOLANA_MAINNET: "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",
  SOLANA_DEVNET: "solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1",
  SOLANA_TESTNET: "solana:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3",
  ETHEREUM_MAINNET: "eip155:1",
  MONAD_DEVNET: "eip155:41454"
};
var BlockchainNames = {
  [BlockchainIds.SOLANA_MAINNET]: "Solana Mainnet",
  [BlockchainIds.SOLANA_DEVNET]: "Solana Devnet",
  [BlockchainIds.SOLANA_TESTNET]: "Solana Testnet",
  [BlockchainIds.ETHEREUM_MAINNET]: "Ethereum Mainnet",
  [BlockchainIds.MONAD_DEVNET]: "Monad Devnet"
};
function getShortBlockchainName(id) {
  const blockchainName = BlockchainNames[id];
  if (!blockchainName) {
    const [chainId, reference] = id.split(":");
    if (chainId && reference) {
      const truncatedReference = reference.length > 3 ? reference.slice(0, 3) + "..." : reference;
      return `${chainId}:${truncatedReference}`;
    } else {
      return id.length > 8 ? id.slice(0, 8) + "..." : id;
    }
  }
  return blockchainName;
}

// src/utils/client-key.ts
var BLINK_CLIENT_KEY_HEADER = "x-blink-client-key";
var clientKey = null;
function setClientKey(key) {
  if (!key) {
    console.warn("[@dialectlabs/blinks] client key is not set");
    clientKey = null;
    return;
  }
  clientKey = key;
}

// src/utils/constants.ts
var SOLANA_ACTION_PREFIX = /^(solana-action:|solana:)/;
var EMPTY_OBJECT = Object.freeze({});

// src/utils/interstitial-url.ts
function isInterstitial(url) {
  try {
    const urlObj = new URL(url);
    const actionUrl = urlObj.searchParams.get("action");
    if (!actionUrl) {
      return { isInterstitial: false };
    }
    const urlDecodedActionUrl = decodeURIComponent(actionUrl);
    if (!SOLANA_ACTION_PREFIX.test(urlDecodedActionUrl)) {
      return { isInterstitial: false };
    }
    const decodedActionUrl = urlDecodedActionUrl.replace(
      SOLANA_ACTION_PREFIX,
      ""
    );
    const decodedActionUrlObj = new URL(decodedActionUrl);
    return {
      isInterstitial: true,
      decodedActionUrl: decodedActionUrlObj.toString()
    };
  } catch (e) {
    console.error(
      `[@dialectlabs/blinks] Failed to check if URL is interstitial: ${url}`,
      e
    );
    return { isInterstitial: false };
  }
}

// src/utils/proxify.ts
var proxyUrl = "https://proxy.dial.to";
function setProxyUrl(url) {
  if (!url) {
    console.warn(
      "[@dialectlabs/blinks] Proxy URL is not set, proxy will be disabled"
    );
    proxyUrl = null;
    return;
  }
  try {
    new URL(url);
  } catch (e) {
    console.warn("[@dialectlabs/blinks] Invalid proxy URL", e);
    return;
  }
  proxyUrl = url;
}
function proxify(url) {
  return createProxifiedUrl(url);
}
function proxifyImage(url) {
  return createProxifiedUrl(url, "image");
}
function proxifyMetadata(url) {
  return createProxifiedUrl(url, "metadata");
}
function createProxifiedUrl(url, endpoint) {
  const incomingUrl = new URL(url);
  if (!proxyUrl || shouldIgnoreProxy(incomingUrl)) {
    return {
      url: incomingUrl,
      headers: {}
    };
  }
  const proxifiedUrl = endpoint ? new URL(endpoint, proxyUrl) : new URL(proxyUrl);
  proxifiedUrl.searchParams.set("url", url);
  return {
    url: proxifiedUrl,
    headers: getProxifiedHeaders()
  };
}
function getProxifiedHeaders() {
  return {
    ...clientKey && { [BLINK_CLIENT_KEY_HEADER]: clientKey }
  };
}
function shouldIgnoreProxy(url) {
  return url.hostname === "localhost" || url.hostname === "127.0.0.1";
}

// src/utils/security.ts
var checkSecurity = (state, securityLevel) => {
  switch (securityLevel) {
    case "only-trusted":
      return state === "trusted";
    case "non-malicious":
      return state !== "malicious";
    case "all":
      return true;
  }
};
var isUrlSameOrigin = (origin, url) => {
  if (!url.startsWith("http")) {
    return true;
  }
  const urlObj = new URL(url);
  return urlObj.origin === origin;
};

// src/utils/url-mapper.ts
var ActionsURLMapper = class {
  
  constructor(config) {
    this.config = config;
  }
  mapUrl(url) {
    const urlObj = typeof url === "string" ? new URL(url) : url;
    const queryParams = urlObj.search;
    for (const action of this.config.rules) {
      if (this.isExactMatch(action.pathPattern, urlObj)) {
        return `${action.apiPath}${queryParams}`;
      }
      const match = this.matchPattern(action.pathPattern, urlObj);
      if (match) {
        return this.constructMappedUrl(
          action.apiPath,
          match,
          queryParams,
          urlObj.origin
        );
      }
    }
    return null;
  }
  // Helper method to check for exact match
  isExactMatch(pattern, urlObj) {
    return pattern === `${urlObj.origin}${urlObj.pathname}`;
  }
  // Helper method to match the URL with the pattern
  matchPattern(pattern, urlObj) {
    const fullPattern = new RegExp(
      `^${pattern.replace(/\*\*/g, "(.*)").replace(/\/(\*)/g, "/([^/]+)")}$`
    );
    const urlToMatch = pattern.startsWith("http") ? urlObj.toString() : urlObj.pathname;
    return urlToMatch.match(fullPattern);
  }
  // Helper method to construct the mapped URL
  constructMappedUrl(apiPath, match, queryParams, origin) {
    let mappedPath = apiPath;
    match.slice(1).forEach((group) => {
      mappedPath = mappedPath.replace(/\*+/, group);
    });
    if (apiPath.startsWith("http")) {
      const mappedUrl = new URL(mappedPath);
      return `${mappedUrl.origin}${mappedUrl.pathname}${queryParams}`;
    }
    return `${origin}${mappedPath}${queryParams}`;
  }
};
async function unfurlUrlToActionApiUrl(actionUrl) {
  const url = new URL(actionUrl);
  const strUrl = actionUrl.toString();
  if (SOLANA_ACTION_PREFIX.test(strUrl)) {
    return strUrl.replace(SOLANA_ACTION_PREFIX, "");
  }
  const interstitialData = isInterstitial(url);
  if (interstitialData.isInterstitial) {
    return interstitialData.decodedActionUrl;
  }
  const actionsJsonUrl = url.origin + "/actions.json";
  const { url: proxyUrl2, headers: proxyHeaders } = proxify(actionsJsonUrl);
  const actionsJson = await fetch(proxyUrl2, {
    headers: {
      ...proxyHeaders
    }
  }).then((res) => res.json());
  const actionsUrlMapper = new ActionsURLMapper(actionsJson);
  return actionsUrlMapper.mapUrl(url);
}

// src/api/Action/Action.ts
var _nonsecure = require('nanoid/non-secure');

// package.json
var package_default = {
  name: "@dialectlabs/blinks-core",
  version: "0.16.5",
  license: "Apache-2.0",
  private: false,
  sideEffects: true,
  type: "module",
  repository: {
    type: "git",
    url: "https://github.com/dialectlabs/blinks"
  },
  scripts: {
    build: "tsup-node",
    dev: "tsup-node --watch"
  },
  main: "dist/index.cjs",
  module: "dist/index.js",
  types: "dist/index.d.ts",
  exports: {
    ".": {
      import: "./dist/index.js",
      require: "./dist/index.cjs",
      types: "./dist/index.d.ts"
    }
  },
  files: [
    "dist"
  ],
  devDependencies: {
    "@solana/actions-spec": "~2.4.2",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@typescript-eslint/eslint-plugin": "^7.16.1",
    "@typescript-eslint/parser": "^7.16.1",
    autoprefixer: "^10.4.19",
    eslint: "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-react": "^7.34.4",
    "eslint-plugin-react-hooks": "^4.6.2",
    postcss: "^8.4.39",
    "postcss-prefix-selector": "^1.16.1",
    prettier: "^3.3.3",
    "prettier-plugin-organize-imports": "^4.0.0",
    "prettier-plugin-tailwindcss": "^0.6.5",
    tailwindcss: "^3.4.3",
    tsup: "^8.2.0",
    typescript: "^5.5.3"
  },
  peerDependencies: {
    react: ">=18"
  },
  dependencies: {
    "@solana/web3.js": "^1.95.1",
    nanoid: "^5.0.7"
  }
};

// src/utils/dependency-versions.ts
var pkg = package_default;
var ACTIONS_SPEC_VERSION = pkg.devDependencies["@solana/actions-spec"].replace(/[^\d.]/g, "");

// src/api/Action/action-supportability.ts
var MAX_SUPPORTED_ACTION_VERSION = ACTIONS_SPEC_VERSION;
var DEFAULT_SUPPORTED_BLOCKCHAIN_IDS = [
  BlockchainIds.SOLANA_MAINNET,
  BlockchainIds.SOLANA_DEVNET
];
var BASELINE_ACTION_VERSION = "2.2";
var BASELINE_ACTION_BLOCKCHAIN_IDS = [BlockchainIds.SOLANA_MAINNET];
var defaultActionSupportStrategy = async (action, adapter) => {
  const { version: actionVersion, blockchainIds: actionBlockchainIds } = action.metadata;
  if (!actionVersion || !actionBlockchainIds || actionBlockchainIds.length === 0) {
    return {
      isSupported: false,
      message: "Action compatibility metadata is not set. Please contact the action provider."
    };
  }
  const supportedActionVersion = MAX_SUPPORTED_ACTION_VERSION;
  const supportedBlockchainIds = adapter.metadata.supportedBlockchainIds;
  const versionSupported = isVersionSupported({
    actionVersion,
    supportedActionVersion
  });
  const blockchainSupported = isBlockchainSupported({
    actionBlockchainIds,
    supportedBlockchainIds
  });
  const notSupportedBlockchainIds = actionBlockchainIds.filter(
    (id) => !supportedBlockchainIds.includes(id)
  );
  const notSupportedActionBlockchainNames = notSupportedBlockchainIds.map(
    getShortBlockchainName
  );
  if (!versionSupported && !blockchainSupported) {
    const blockchainMessage = notSupportedActionBlockchainNames.length === 1 ? `blockchain ${notSupportedActionBlockchainNames[0]}` : `blockchains ${notSupportedActionBlockchainNames.join(", ")}`;
    return {
      isSupported: false,
      message: `Action version ${actionVersion} and ${blockchainMessage} are not supported by your Blink client.`
    };
  }
  if (!versionSupported) {
    return {
      isSupported: false,
      message: `Action version ${actionVersion} is not supported by your Blink client.`
    };
  }
  if (!blockchainSupported) {
    const blockchainMessage = notSupportedActionBlockchainNames.length === 1 ? `Action blockchain ${notSupportedActionBlockchainNames[0]} is not supported by your Blink client.` : `Action blockchains ${notSupportedActionBlockchainNames.join(", ")} are not supported by your Blink client.`;
    return {
      isSupported: false,
      message: blockchainMessage
    };
  }
  return {
    isSupported: true
  };
};
function isVersionSupported({
  supportedActionVersion,
  actionVersion
}) {
  return compareSemverIgnoringPatch(actionVersion, supportedActionVersion) <= 0;
}
function compareSemverIgnoringPatch(v1, v2) {
  const [major1, minor1] = v1.split(".").map(Number);
  const [major2, minor2] = v2.split(".").map(Number);
  if (major1 !== major2) {
    return major1 - major2;
  } else if (minor1 !== minor2) {
    return minor1 - minor2;
  }
  return 0;
}
function isBlockchainSupported({
  supportedBlockchainIds,
  actionBlockchainIds
}) {
  if (actionBlockchainIds.length === 0 || supportedBlockchainIds.length === 0) {
    return false;
  }
  const sanitizedSupportedBlockchainIds = supportedBlockchainIds.map(
    (it) => it.trim()
  );
  const sanitizedActionBlockchainIds = actionBlockchainIds.map(
    (it) => it.trim()
  );
  return sanitizedActionBlockchainIds.every(
    (chain) => sanitizedSupportedBlockchainIds.includes(chain)
  );
}

// src/api/Action/Action.ts
var MULTI_VALUE_TYPES = ["checkbox"];
var EXPERIMENTAL_LIVE_DATA_DEFAULT_DELAY_MS = 1e3;
var Action = class _Action {
  constructor(_url, _data, _metadata, _supportStrategy, _chainMetadata = { isChained: false }, _id, _experimental) {
    this._url = _url;
    this._data = _data;
    this._metadata = _metadata;
    this._supportStrategy = _supportStrategy;
    this._chainMetadata = _chainMetadata;
    this._id = _id;
    this._experimental = _experimental;
    if (_data.type === "completed" || !_optionalChain([_data, 'access', _ => _.links, 'optionalAccess', _2 => _2.actions])) {
      this._actions = [
        new ButtonActionComponent(this, _data.label, _url, "transaction")
      ];
      return;
    }
    const urlObj = new URL(_url);
    this._actions = _data.links.actions.map((action) => {
      const href = action.href.startsWith("http") ? action.href : urlObj.origin + action.href;
      return componentFactory(
        this,
        action.label,
        href,
        _nullishCoalesce(action.type, () => ( "transaction")),
        action.parameters
      );
    });
  }
  
  // this API MAY change in the future
  get liveData_experimental() {
    const liveData = _optionalChain([this, 'access', _3 => _3._experimental, 'optionalAccess', _4 => _4.liveData]);
    if (!liveData) {
      return null;
    }
    return {
      enabled: liveData.enabled,
      delayMs: liveData.delayMs ? Math.max(liveData.delayMs, EXPERIMENTAL_LIVE_DATA_DEFAULT_DELAY_MS) : EXPERIMENTAL_LIVE_DATA_DEFAULT_DELAY_MS
    };
  }
  get id() {
    return this._id;
  }
  get isChained() {
    return this._chainMetadata.isChained;
  }
  get isInline() {
    return this._chainMetadata.isChained ? this._chainMetadata.isInline : false;
  }
  get type() {
    return this._data.type;
  }
  get url() {
    return this._url;
  }
  get icon() {
    if (this._data.icon.startsWith("data:")) {
      return this._data.icon;
    }
    return proxifyImage(this._data.icon).url.toString();
  }
  get title() {
    return this._data.title;
  }
  get description() {
    return this._data.description;
  }
  get disabled() {
    return _nullishCoalesce(this._data.disabled, () => ( false));
  }
  get actions() {
    return this._actions;
  }
  get error() {
    return _nullishCoalesce(_optionalChain([this, 'access', _5 => _5._data, 'access', _6 => _6.error, 'optionalAccess', _7 => _7.message]), () => ( null));
  }
  get metadata() {
    return {
      blockchainIds: _nullishCoalesce(this._metadata.blockchainIds, () => ( BASELINE_ACTION_BLOCKCHAIN_IDS)),
      version: _nullishCoalesce(this._metadata.version, () => ( BASELINE_ACTION_VERSION))
    };
  }
  async isSupported(adapter) {
    try {
      return await this._supportStrategy(this, adapter);
    } catch (e) {
      console.error(
        `[@dialectlabs/blinks] Failed to check supportability for action ${this.url}`,
        e
      );
      return {
        isSupported: false,
        message: "Failed to check supportability, please contact your Blink client provider."
      };
    }
  }
  async chain(next, chainData) {
    const id = _nonsecure.nanoid.call(void 0, );
    if (next.type === "inline") {
      return new _Action(
        this.url,
        next.action,
        this.metadata,
        this._supportStrategy,
        {
          isChained: true,
          isInline: true
        },
        id
      );
    }
    const baseUrlObj = new URL(this.url);
    if (!isUrlSameOrigin(baseUrlObj.origin, next.href)) {
      console.error(
        `Chained action is not the same origin as the current action. Original: ${this.url}, chained: ${next.href}`
      );
      return null;
    }
    const href = next.href.startsWith("http") ? next.href : baseUrlObj.origin + next.href;
    const { url: proxyUrl2, headers: proxyHeaders } = proxify(href);
    const response = await fetch(proxyUrl2, {
      method: "POST",
      body: JSON.stringify(chainData),
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        ...proxyHeaders
      }
    });
    if (!response.ok) {
      console.error(
        `Failed to fetch chained action ${proxyUrl2}, action url: ${next.href}`
      );
      return null;
    }
    const data = await response.json();
    const metadata = getActionMetadata(response);
    return new _Action(
      href,
      data,
      metadata,
      this._supportStrategy,
      {
        isChained: true,
        isInline: false
      },
      id
    );
  }
  // be sure to use this only if the action is valid
  static hydrate(url, data, metadata, supportStrategy) {
    const id = _nonsecure.nanoid.call(void 0, );
    return new _Action(
      url,
      data,
      metadata,
      supportStrategy,
      { isChained: false },
      id
    );
  }
  static async _fetch(apiUrl, supportStrategy = defaultActionSupportStrategy, chainMetadata, id) {
    const { url: proxyUrl2, headers: proxyHeaders } = proxify(apiUrl);
    const response = await fetch(proxyUrl2, {
      headers: {
        Accept: "application/json",
        ...proxyHeaders
      }
    });
    if (!response.ok) {
      throw new Error(
        `Failed to fetch action ${proxyUrl2}, action url: ${apiUrl}`
      );
    }
    const data = await response.json();
    const metadata = getActionMetadata(response);
    return new _Action(
      apiUrl,
      { ...data, type: "action" },
      metadata,
      supportStrategy,
      chainMetadata,
      id,
      data.dialectExperimental
    );
  }
  static async fetch(apiUrl, supportStrategy = defaultActionSupportStrategy) {
    const id = _nonsecure.nanoid.call(void 0, );
    return _Action._fetch(
      apiUrl,
      supportStrategy,
      {
        isChained: false
      },
      id
    );
  }
  refresh() {
    return _Action._fetch(
      this.url,
      this._supportStrategy,
      this._chainMetadata,
      this._id
    );
  }
  withUpdate(update) {
    return new _Action(
      this._url,
      this._data,
      this._metadata,
      _nullishCoalesce(update.supportStrategy, () => ( this._supportStrategy)),
      this._chainMetadata,
      this._id,
      this._experimental
    );
  }
};
var getActionMetadata = (response) => {
  const blockchainIds = _optionalChain([response, 'access', _8 => _8.headers, 'access', _9 => _9.get, 'call', _10 => _10("x-blockchain-ids"), 'optionalAccess', _11 => _11.split, 'call', _12 => _12(","), 'access', _13 => _13.map, 'call', _14 => _14((id) => id.trim())]);
  const version = _optionalChain([response, 'access', _15 => _15.headers, 'access', _16 => _16.get, 'call', _17 => _17("x-action-version"), 'optionalAccess', _18 => _18.trim, 'call', _19 => _19()]);
  return {
    blockchainIds,
    version
  };
};
var componentFactory = (parent, label, href, type, parameters) => {
  if (!_optionalChain([parameters, 'optionalAccess', _20 => _20.length])) {
    return new ButtonActionComponent(parent, label, href, type);
  }
  if (parameters.length > 1) {
    return new FormActionComponent(parent, label, href, type, parameters);
  }
  const [parameter] = parameters;
  if (!parameter.type) {
    return new SingleValueActionComponent(
      parent,
      label,
      href,
      type,
      parameters
    );
  }
  if (MULTI_VALUE_TYPES.includes(parameter.type)) {
    return new MultiValueActionComponent(parent, label, href, type, parameters);
  }
  return new SingleValueActionComponent(parent, label, href, type, parameters);
};

// src/api/Action/action-components/AbstractActionComponent.ts
var AbstractActionComponent = class {
  constructor(_parent, _label, _href, _type, _parameters) {
    this._parent = _parent;
    this._label = _label;
    this._href = _href;
    this._type = _type;
    this._parameters = _parameters;
  }
  get parent() {
    return this._parent;
  }
  get label() {
    return this._label;
  }
  get parameters() {
    return _nullishCoalesce(this._parameters, () => ( []));
  }
  get type() {
    return this._type;
  }
  async post(account) {
    const { url: proxyUrl2, headers: proxyHeaders } = proxify(this.href);
    const response = await fetch(proxyUrl2, {
      method: "POST",
      body: JSON.stringify(this.buildBody(account)),
      headers: {
        "Content-Type": "application/json",
        ...proxyHeaders
      }
    });
    if (!response.ok) {
      const error = await response.json();
      console.error(
        `[@dialectlabs/blinks] Failed to execute action ${proxyUrl2}, href ${this.href}, reason: ${error.message}`
      );
      throw {
        message: error.message
      };
    }
    return await response.json();
  }
};

// src/api/Action/action-components/ButtonActionComponent.ts
var ButtonActionComponent = class extends AbstractActionComponent {
  constructor(_parent, _label, _href, _type, _parameters, _parentComponent) {
    super(_parent, _label, _href, _type, _parameters);
    this._parent = _parent;
    this._label = _label;
    this._href = _href;
    this._type = _type;
    this._parameters = _parameters;
    this._parentComponent = _parentComponent;
  }
  get parentComponent() {
    return _nullishCoalesce(this._parentComponent, () => ( null));
  }
  buildBody(account) {
    return { account, type: this.type };
  }
  get href() {
    return this._href;
  }
};

// src/api/Action/action-components/SingleValueActionComponent.ts
var SingleValueActionComponent = (_class = class extends AbstractActionComponent {
  constructor(_parent, _label, _href, _type, _parameters, _parentComponent) {
    super(_parent, _label, _href, _type, _parameters);_class.prototype.__init.call(this);;
    this._parent = _parent;
    this._label = _label;
    this._href = _href;
    this._type = _type;
    this._parameters = _parameters;
    this._parentComponent = _parentComponent;
  }
  __init() {this.parameterValue = null}
  get parentComponent() {
    return _nullishCoalesce(this._parentComponent, () => ( null));
  }
  buildBody(account) {
    if (this._href.indexOf(`{${this.parameter.name}}`) > -1 || this.parameterValue === null) {
      return { account, type: this.type };
    }
    return {
      account,
      type: this.type,
      data: {
        [this.parameter.name]: this.parameterValue
      }
    };
  }
  get parameter() {
    const [param] = this.parameters;
    return param;
  }
  setValue(value) {
    this.parameterValue = value;
  }
  get href() {
    return this._href.replace(
      `{${this.parameter.name}}`,
      encodeURIComponent(_nullishCoalesce(_optionalChain([this, 'access', _21 => _21.parameterValue, 'optionalAccess', _22 => _22.toString, 'call', _23 => _23(), 'access', _24 => _24.trim, 'call', _25 => _25()]), () => ( "")))
    );
  }
  toButtonActionComponent() {
    return new ButtonActionComponent(
      this._parent,
      this._label,
      this._href,
      this._type,
      void 0,
      this
    );
  }
}, _class);

// src/api/Action/action-components/FormActionComponent.ts
var FormActionComponent = (_class2 = class extends AbstractActionComponent {
  constructor(_parent, _label, _href, _type, _parameters, _parentComponent) {
    super(_parent, _label, _href, _type, _parameters);_class2.prototype.__init2.call(this);;
    this._parent = _parent;
    this._label = _label;
    this._href = _href;
    this._type = _type;
    this._parameters = _parameters;
    this._parentComponent = _parentComponent;
  }
  __init2() {this.parameterValues = {}}
  get parentComponent() {
    return _nullishCoalesce(this._parentComponent, () => ( null));
  }
  // any, since we don't know the parameter names on the client level
  buildBody(account) {
    const paramNames = Object.keys(this.parameterValues);
    const bodyParams = [];
    paramNames.forEach((paramName) => {
      if (this._href.indexOf(`{${paramName}}`) === -1) {
        bodyParams.push(paramName);
      }
    });
    if (bodyParams.length > 0) {
      return {
        account,
        type: this.type,
        data: Object.fromEntries(
          paramNames.filter((name) => bodyParams.includes(name)).map((paramName) => [paramName, this.parameterValues[paramName]])
        )
      };
    }
    return { account, type: this.type };
  }
  get href() {
    const replacedHref = this.parameters.reduce((href, param) => {
      const value = this.parameterValues[param.name];
      if (!value) {
        return href;
      }
      return href.replace(
        `{${param.name}}`,
        encodeURIComponent(
          typeof value === "string" ? value : _optionalChain([value, 'optionalAccess', _26 => _26.join, 'call', _27 => _27(",")])
        )
      );
    }, this._href);
    return replacedHref.replaceAll(/={[^}]+}&/g, "=&").replaceAll(/={[^}]+}/g, "=");
  }
  setValue(value, name) {
    this.parameterValues[name] = value;
  }
  toButtonActionComponent() {
    return new ButtonActionComponent(
      this._parent,
      this._label,
      this.href,
      this._type,
      void 0,
      this
    );
  }
  toInputActionComponent(paramName) {
    const parameter = this.parameters.find((param) => param.name === paramName);
    if (!parameter) {
      throw new Error(`Input Parameter ${paramName} not found`);
    }
    return new SingleValueActionComponent(
      this._parent,
      this._label,
      this._href,
      this._type,
      [parameter],
      this
    );
  }
}, _class2);

// src/api/Action/action-components/MultiValueActionComponent.ts
var MultiValueActionComponent = (_class3 = class extends AbstractActionComponent {
  constructor(_parent, _label, _href, _type, _parameters, _parentComponent) {
    super(_parent, _label, _href, _type, _parameters);_class3.prototype.__init3.call(this);;
    this._parent = _parent;
    this._label = _label;
    this._href = _href;
    this._type = _type;
    this._parameters = _parameters;
    this._parentComponent = _parentComponent;
  }
  __init3() {this.parameterValue = []}
  get parentComponent() {
    return _nullishCoalesce(this._parentComponent, () => ( null));
  }
  // any, since we don't know the parameter names on the client level
  buildBody(account) {
    if (this._href.indexOf(`{${this.parameter.name}}`) > -1) {
      return { account, type: this.type };
    }
    return {
      account,
      type: this.type,
      data: {
        [this.parameter.name]: this.isMultiOptions ? this.parameterValue : this.parameterValue[0]
      }
    };
  }
  get isMultiOptions() {
    return this.parameter.type === "checkbox";
  }
  get parameter() {
    const [param] = this.parameters;
    return param;
  }
  setValue(value) {
    this.parameterValue = typeof value === "string" ? [value] : value;
  }
  get href() {
    return this._href.replace(
      `{${this.parameter.name}}`,
      encodeURIComponent(this.parameterValue.join(","))
    );
  }
  toButtonActionComponent() {
    return new ButtonActionComponent(
      this._parent,
      this._label,
      this._href,
      this._type,
      void 0,
      this
    );
  }
}, _class3);

// src/api/Action/action-components/guards.ts
var isPatternAllowed = (parameter) => {
  return parameter.type !== "select" && parameter.type !== "radio" && parameter.type !== "checkbox";
};
var isParameterSelectable = (parameter) => {
  return parameter.type === "select" || parameter.type === "radio" || parameter.type === "checkbox";
};

// src/api/Action/sign-message-data.ts
var SignMessageVerificationErrorType = /* @__PURE__ */ ((SignMessageVerificationErrorType2) => {
  SignMessageVerificationErrorType2["ADDRESS_MISMATCH"] = "ADDRESS_MISMATCH";
  SignMessageVerificationErrorType2["DOMAIN_MISMATCH"] = "DOMAIN_MISMATCH";
  SignMessageVerificationErrorType2["CHAIN_ID_MISMATCH"] = "CHAIN_ID_MISMATCH";
  SignMessageVerificationErrorType2["ISSUED_TOO_FAR_IN_THE_PAST"] = "ISSUED_TOO_FAR_IN_THE_PAST";
  SignMessageVerificationErrorType2["ISSUED_TOO_FAR_IN_THE_FUTURE"] = "ISSUED_TOO_FAR_IN_THE_FUTURE";
  SignMessageVerificationErrorType2["INVALID_DATA"] = "INVALID_DATA";
  return SignMessageVerificationErrorType2;
})(SignMessageVerificationErrorType || {});
var DOMAIN = "(?<domain>[^\\n]+?) wants you to sign a message with your account:\\n";
var ADDRESS = "(?<address>[^\\n]+)(?:\\n|$)";
var STATEMENT = "(?:\\n(?<statement>[\\S\\s]*?)(?:\\n|$))";
var CHAIN_ID = "(?:\\nChain ID: (?<chainId>[^\\n]+))?";
var NONCE = "\\nNonce: (?<nonce>[^\\n]+)";
var ISSUED_AT = "\\nIssued At: (?<issuedAt>[^\\n]+)";
var FIELDS = `${CHAIN_ID}${NONCE}${ISSUED_AT}`;
var MESSAGE = new RegExp(`^${DOMAIN}${ADDRESS}${STATEMENT}${FIELDS}\\n*$`);
function createSignMessageText(input) {
  let message = `${input.domain} wants you to sign a message with your account:
`;
  message += `${input.address}`;
  message += `

${input.statement}`;
  const fields = [];
  if (input.chainId) {
    fields.push(`Chain ID: ${input.chainId}`);
  }
  fields.push(`Nonce: ${input.nonce}`);
  fields.push(`Issued At: ${input.issuedAt}`);
  message += `

${fields.join("\n")}`;
  return message;
}
function parseSignMessageText(text) {
  const match = MESSAGE.exec(text);
  if (!match) return null;
  const groups = match.groups;
  if (!groups) return null;
  return {
    domain: groups.domain,
    address: groups.address,
    statement: groups.statement,
    nonce: groups.nonce,
    chainId: groups.chainId,
    issuedAt: groups.issuedAt
  };
}
function verifySignMessageData(data, opts) {
  if (!data.address || !data.domain || !data.issuedAt || !data.nonce || !data.statement) {
    return ["INVALID_DATA" /* INVALID_DATA */];
  }
  try {
    const {
      expectedAddress,
      expectedChainIds,
      issuedAtThreshold,
      expectedDomains
    } = opts;
    const errors = [];
    const now = Date.now();
    if (expectedAddress && data.address !== expectedAddress) {
      errors.push("ADDRESS_MISMATCH" /* ADDRESS_MISMATCH */);
    }
    if (expectedDomains) {
      const expectedDomainsNormalized = expectedDomains.map(normalizeDomain);
      const normalizedDomain = normalizeDomain(data.domain);
      if (!expectedDomainsNormalized.includes(normalizedDomain)) {
        errors.push("DOMAIN_MISMATCH" /* DOMAIN_MISMATCH */);
      }
    }
    if (expectedChainIds && data.chainId && !expectedChainIds.includes(data.chainId)) {
      errors.push("CHAIN_ID_MISMATCH" /* CHAIN_ID_MISMATCH */);
    }
    if (issuedAtThreshold !== void 0) {
      const iat = Date.parse(data.issuedAt);
      if (Math.abs(iat - now) > issuedAtThreshold) {
        if (iat < now) {
          errors.push(
            "ISSUED_TOO_FAR_IN_THE_PAST" /* ISSUED_TOO_FAR_IN_THE_PAST */
          );
        } else {
          errors.push(
            "ISSUED_TOO_FAR_IN_THE_FUTURE" /* ISSUED_TOO_FAR_IN_THE_FUTURE */
          );
        }
      }
    }
    return errors;
  } catch (e) {
    return ["INVALID_DATA" /* INVALID_DATA */];
  }
}
function normalizeDomain(domain) {
  return domain.replace(/^www\./, "");
}

// src/api/ActionConfig.ts
var _web3js = require('@solana/web3.js');
var ActionConfig = (_class4 = class _ActionConfig {
  constructor(rpcUrlOrConnection, adapter) {
    this.adapter = adapter;
    if (!rpcUrlOrConnection) {
      throw new Error("rpcUrl or connection is required");
    }
    this.connection = typeof rpcUrlOrConnection === "string" ? new (0, _web3js.Connection)(rpcUrlOrConnection, "confirmed") : rpcUrlOrConnection;
  }
  static __initStatic() {this.CONFIRM_TIMEOUT_MS = 6e4 * 1.2}
  // 20% extra time
  static __initStatic2() {this.DEFAULT_METADATA = {
    supportedBlockchainIds: DEFAULT_SUPPORTED_BLOCKCHAIN_IDS
  }}
  
  get metadata() {
    return _nullishCoalesce(this.adapter.metadata, () => ( _ActionConfig.DEFAULT_METADATA));
  }
  signTransaction(tx, context) {
    return this.adapter.signTransaction(tx, context);
  }
  confirmTransaction(signature) {
    return new Promise((res, rej) => {
      const start = Date.now();
      const confirm = async () => {
        if (Date.now() - start >= _ActionConfig.CONFIRM_TIMEOUT_MS) {
          rej(new Error("Unable to confirm transaction: timeout reached"));
          return;
        }
        try {
          const status = await this.connection.getSignatureStatus(signature);
          if (_optionalChain([status, 'access', _28 => _28.value, 'optionalAccess', _29 => _29.err])) {
            rej(
              new Error(
                `Transaction execution failed, check wallet for details`
              )
            );
            return;
          }
          if (status.value && status.value.confirmations !== null) {
            res();
            return;
          }
        } catch (e) {
          console.error(
            "[@dialectlabs/blinks] Error confirming transaction",
            e
          );
        }
        setTimeout(confirm, 3e3);
      };
      confirm();
    });
  }
  async signMessage(data, context) {
    return this.adapter.signMessage(data, context);
  }
  async connect(context) {
    try {
      return await this.adapter.connect(context);
    } catch (e2) {
      return null;
    }
  }
}, _class4.__initStatic(), _class4.__initStatic2(), _class4);

// src/api/ActionsRegistry.ts
var DEFAULT_REFRESH_INTERVAL = 10 * 60 * 1e3;
var ActionsRegistry = (_class5 = class _ActionsRegistry {
  static __initStatic3() {this.instance = null}
  
  
  
  __init4() {this.intervalId = null}
  constructor(config) {;_class5.prototype.__init4.call(this);
    this.actionsByHost = config ? Object.fromEntries(
      config.actions.map((action) => [action.host, action])
    ) : {};
    this.websitesByHost = config ? Object.fromEntries(
      config.websites.map((website) => [website.host, website])
    ) : {};
    this.interstitialsByHost = config ? Object.fromEntries(
      config.interstitials.map((interstitial) => [
        interstitial.host,
        interstitial
      ])
    ) : {};
  }
  static getInstance(config) {
    if (this.instance === null || config) {
      this.instance = new _ActionsRegistry(config);
    }
    return this.instance;
  }
  async init() {
    if (this.intervalId !== null) {
      return;
    }
    await this.refresh();
    this.intervalId = setInterval(
      () => this.refresh(),
      DEFAULT_REFRESH_INTERVAL
    );
  }
  stopRefresh() {
    if (this.intervalId !== null) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
  }
  async refresh() {
    const config = await fetchActionsRegistryConfig();
    this.actionsByHost = Object.fromEntries(
      config.actions.map((action) => [action.host, action])
    );
    this.websitesByHost = Object.fromEntries(
      config.websites.map((website) => [website.host, website])
    );
    this.interstitialsByHost = Object.fromEntries(
      config.interstitials.map((interstitial) => [
        interstitial.host,
        interstitial
      ])
    );
  }
  lookup(url, type = "action") {
    if (type === "action") {
      return this.lookupAction(url);
    }
    if (type === "website") {
      return this.lookupWebsite(url);
    }
    if (type === "interstitial") {
      return this.lookupInterstitial(url);
    }
    return null;
  }
  lookupAction(url) {
    try {
      const urlObj = new URL(url);
      const host = urlObj.host;
      return _nullishCoalesce(this.actionsByHost[host], () => ( null));
    } catch (e) {
      console.error(
        `[@dialectlabs/blinks] Failed to lookup action for URL: ${url}`,
        e
      );
      return null;
    }
  }
  lookupWebsite(url) {
    try {
      const urlObj = new URL(url);
      const host = urlObj.host;
      return _nullishCoalesce(this.websitesByHost[host], () => ( null));
    } catch (e) {
      console.error(
        `[@dialectlabs/blinks] Failed to lookup website for URL: ${url}`,
        e
      );
      return null;
    }
  }
  lookupInterstitial(url) {
    try {
      const urlObj = new URL(url);
      const host = urlObj.host;
      return _nullishCoalesce(this.interstitialsByHost[host], () => ( null));
    } catch (e) {
      console.error(
        `[@dialectlabs/blinks] Failed to lookup interstitial for URL: ${url}`,
        e
      );
      return null;
    }
  }
}, _class5.__initStatic3(), _class5);
var mergeActionStates = (...states) => {
  if (states.includes("malicious")) {
    return "malicious";
  }
  if (states.includes("unknown")) {
    return "unknown";
  }
  return "trusted";
};
var getExtendedActionState = (actionOrUrl) => {
  return _nullishCoalesce(_optionalChain([ActionsRegistry, 'access', _30 => _30.getInstance, 'call', _31 => _31(), 'access', _32 => _32.lookup, 'call', _33 => _33(
    typeof actionOrUrl === "string" ? actionOrUrl : actionOrUrl.url,
    "action"
  ), 'optionalAccess', _34 => _34.state]), () => ( "unknown"));
};
var getExtendedWebsiteState = (url) => {
  return _nullishCoalesce(_optionalChain([ActionsRegistry, 'access', _35 => _35.getInstance, 'call', _36 => _36(), 'access', _37 => _37.lookup, 'call', _38 => _38(url, "website"), 'optionalAccess', _39 => _39.state]), () => ( "unknown"));
};
var getExtendedInterstitialState = (url) => {
  return _nullishCoalesce(_optionalChain([ActionsRegistry, 'access', _40 => _40.getInstance, 'call', _41 => _41(), 'access', _42 => _42.lookup, 'call', _43 => _43(url, "interstitial"), 'optionalAccess', _44 => _44.state]), () => ( "unknown"));
};
async function fetchActionsRegistryConfig() {
  try {
    const response = await fetch("https://actions-registry.dial.to/all");
    if (!response.ok) {
      console.error(
        "[@dialectlabs/blinks] Failed to fetch actions registry config",
        await response.json()
      );
      return { actions: [], interstitials: [], websites: [] };
    }
    return await response.json();
  } catch (e) {
    console.error(
      "[@dialectlabs/blinks] Failed to fetch actions registry config",
      e
    );
    return { actions: [], interstitials: [], websites: [] };
  }
}

// src/BlinkContainer.tsx





var _react = require('react');

// src/utils/type-guards.ts
var isSignTransactionError = (data) => !!data.error;
var isSignMessageError = isSignTransactionError;
var isPostRequestError = (data) => !!data.error;

// src/utils/validators.ts
var isURL = (url) => {
  try {
    new URL(url);
    return true;
  } catch (e3) {
    return false;
  }
};

// src/BlinkContainer.tsx
var _jsxruntime = require('react/jsx-runtime');
var DisclaimerType = /* @__PURE__ */ ((DisclaimerType2) => {
  DisclaimerType2["BLOCKED"] = "blocked";
  DisclaimerType2["UNKNOWN"] = "unknown";
  return DisclaimerType2;
})(DisclaimerType || {});
var ExecutionType = /* @__PURE__ */ ((ExecutionType2) => {
  ExecutionType2["CHECK_SUPPORTABILITY"] = "CHECK_SUPPORTABILITY";
  ExecutionType2["INITIATE"] = "INITIATE";
  ExecutionType2["FINISH"] = "FINISH";
  ExecutionType2["FAIL"] = "FAIL";
  ExecutionType2["RESET"] = "RESET";
  ExecutionType2["SOFT_RESET"] = "SOFT_RESET";
  ExecutionType2["UNBLOCK"] = "UNBLOCK";
  ExecutionType2["BLOCK"] = "BLOCK";
  return ExecutionType2;
})(ExecutionType || {});
var executionReducer = (state, action) => {
  switch (action.type) {
    case "CHECK_SUPPORTABILITY" /* CHECK_SUPPORTABILITY */:
      return {
        status: "checking-supportability",
        checkingSupportability: true
      };
    case "INITIATE" /* INITIATE */:
      return { status: "executing", executingAction: action.executingAction };
    case "FINISH" /* FINISH */:
      return {
        ...state,
        status: "success",
        successMessage: action.successMessage,
        errorMessage: null
      };
    case "FAIL" /* FAIL */:
      return {
        ...state,
        status: "error",
        errorMessage: action.errorMessage,
        successMessage: null
      };
    case "RESET" /* RESET */:
      return {
        status: "idle"
      };
    case "SOFT_RESET" /* SOFT_RESET */:
      return {
        ...state,
        executingAction: null,
        status: "idle",
        errorMessage: action.errorMessage,
        successMessage: null
      };
    case "BLOCK" /* BLOCK */:
      return {
        status: "blocked"
      };
    case "UNBLOCK" /* UNBLOCK */:
      return {
        status: "idle"
      };
  }
};
var getOverallActionState = (action, websiteUrl) => {
  const actionState = getExtendedActionState(action);
  const originalUrlData = websiteUrl ? isInterstitial(websiteUrl) : null;
  if (!originalUrlData) {
    return {
      action: actionState
    };
  }
  if (originalUrlData.isInterstitial) {
    return {
      action: actionState,
      origin: getExtendedInterstitialState(websiteUrl),
      originType: "interstitials"
    };
  }
  return {
    action: actionState,
    origin: getExtendedWebsiteState(websiteUrl),
    originType: "websites"
  };
};
var checkSecurityFromActionState = (state, normalizedSecurityLevel) => {
  const checkAction = checkSecurity(
    state.action,
    normalizedSecurityLevel.actions
  );
  if (!state.origin) {
    return checkAction;
  }
  return checkAction && checkSecurity(state.origin, normalizedSecurityLevel[state.originType]);
};
var DEFAULT_SECURITY_LEVEL = "only-trusted";
var BlinkContainer = ({
  action: initialAction,
  adapter,
  websiteUrl,
  websiteText,
  callbacks = EMPTY_OBJECT,
  securityLevel = DEFAULT_SECURITY_LEVEL,
  Layout,
  selector
}) => {
  const [action, setAction] = _react.useState.call(void 0, initialAction);
  const singleComponent = _react.useMemo.call(void 0, () => _optionalChain([selector, 'optionalCall', _45 => _45(action)]), [action, selector]);
  const isPartialAction = typeof selector === "function";
  const normalizedSecurityLevel = _react.useMemo.call(void 0, () => {
    if (typeof securityLevel === "string") {
      return {
        websites: securityLevel,
        interstitials: securityLevel,
        actions: securityLevel
      };
    }
    return securityLevel;
  }, [securityLevel]);
  const [actionState, setActionState] = _react.useState.call(void 0, 
    getOverallActionState(action, websiteUrl)
  );
  const [supportability, setSupportability] = _react.useState.call(void 0, {
    isSupported: true
  });
  const overallState = _react.useMemo.call(void 0, 
    () => mergeActionStates(
      ...[actionState.action, actionState.origin].filter(
        Boolean
      )
    ),
    [actionState]
  );
  const isPassingSecurityCheck = isPartialAction ? true : checkSecurityFromActionState(actionState, normalizedSecurityLevel);
  const [executionState, dispatch] = _react.useReducer.call(void 0, executionReducer, {
    status: isPartialAction ? "idle" : "checking-supportability"
  });
  _react.useEffect.call(void 0, () => {
    if (action === initialAction) {
      return;
    }
    setAction(initialAction);
    setActionState(getOverallActionState(initialAction, websiteUrl));
    dispatch({
      type: isPartialAction ? "RESET" /* RESET */ : "CHECK_SUPPORTABILITY" /* CHECK_SUPPORTABILITY */
    });
  }, [initialAction, websiteUrl]);
  _react.useEffect.call(void 0, () => {
    _optionalChain([callbacks, 'access', _46 => _46.onActionMount, 'optionalCall', _47 => _47(
      initialAction,
      _nullishCoalesce(websiteUrl, () => ( initialAction.url)),
      actionState.action
    )]);
  }, []);
  _react.useEffect.call(void 0, () => {
    const liveDataConfig = action.liveData_experimental;
    if (!liveDataConfig || !liveDataConfig.enabled || executionState.status !== "idle" || action.isChained) {
      return;
    }
    let timeout;
    const fetcher = async () => {
      try {
        const newAction = await action.refresh();
        if (executionState.status === "idle") {
          setAction(newAction);
        }
      } catch (e) {
        console.error(
          `[@dialectlabs/blinks] Failed to fetch live data for action ${action.url}`
        );
        timeout = setTimeout(fetcher, liveDataConfig.delayMs);
      }
    };
    timeout = setTimeout(fetcher, liveDataConfig.delayMs);
    return () => {
      clearTimeout(timeout);
    };
  }, [action, executionState.status, isPartialAction]);
  _react.useEffect.call(void 0, () => {
    const checkSupportability = async (action2) => {
      if (action2.isChained || executionState.status !== "checking-supportability") {
        return;
      }
      try {
        const supportability2 = await action2.isSupported(adapter);
        setSupportability(supportability2);
      } finally {
        dispatch({
          type: overallState !== "malicious" && isPassingSecurityCheck ? "RESET" /* RESET */ : "BLOCK" /* BLOCK */
        });
      }
    };
    checkSupportability(action);
  }, [
    action,
    adapter,
    executionState.status,
    overallState,
    isPassingSecurityCheck
  ]);
  const execute = async (component, params) => {
    if (params) {
      if (component instanceof FormActionComponent) {
        Object.entries(params).forEach(
          ([name, value]) => component.setValue(value, name)
        );
      }
      if (component instanceof MultiValueActionComponent) {
        component.setValue(params[component.parameter.name]);
      }
      if (component instanceof SingleValueActionComponent) {
        const incomingValues = params[component.parameter.name];
        const value = typeof incomingValues === "string" ? incomingValues : incomingValues[0];
        component.setValue(value);
      }
    }
    const newActionState = getOverallActionState(action, websiteUrl);
    const newIsPassingSecurityCheck = checkSecurityFromActionState(
      newActionState,
      normalizedSecurityLevel
    );
    if ((newActionState.action !== actionState.action || newActionState.origin !== actionState.origin) && !newIsPassingSecurityCheck) {
      setActionState(newActionState);
      dispatch({ type: "BLOCK" /* BLOCK */ });
      _optionalChain([callbacks, 'access', _48 => _48.onActionCancel, 'optionalCall', _49 => _49(action, component, "security-state-changed")]);
      return;
    }
    dispatch({ type: "INITIATE" /* INITIATE */, executingAction: component });
    const context = {
      action: component.parent,
      actionType: actionState.action,
      originalUrl: _nullishCoalesce(websiteUrl, () => ( component.parent.url)),
      triggeredLinkedAction: component
    };
    try {
      const account = await adapter.connect(context);
      if (!account) {
        dispatch({ type: "RESET" /* RESET */ });
        _optionalChain([callbacks, 'optionalAccess', _50 => _50.onActionCancel, 'optionalCall', _51 => _51(action, component, "wallet-not-connected")]);
        return;
      }
      const response = await component.post(account).catch((e) => ({ error: e.message }));
      if (isPostRequestError(response)) {
        dispatch({
          type: "SOFT_RESET" /* SOFT_RESET */,
          errorMessage: isPostRequestError(response) ? response.error : "Transaction data missing"
        });
        _optionalChain([callbacks, 'access', _52 => _52.onActionError, 'optionalCall', _53 => _53(action, component, "post-request-error")]);
        return;
      }
      const chain = async (signature) => {
        if (!_optionalChain([response, 'access', _54 => _54.links, 'optionalAccess', _55 => _55.next])) {
          dispatch({
            type: "FINISH" /* FINISH */,
            successMessage: response.message
          });
          _optionalChain([callbacks, 'access', _56 => _56.onActionComplete, 'optionalCall', _57 => _57(action, component, signature)]);
          return;
        }
        if (response.type === "message" && !signature) {
          dispatch({
            type: "SOFT_RESET" /* SOFT_RESET */,
            errorMessage: "Missing signature for message"
          });
          _optionalChain([callbacks, 'access', _58 => _58.onActionError, 'optionalCall', _59 => _59(
            action,
            component,
            "message-signature-missing"
          )]);
          return;
        }
        const chainData = response.type === "message" ? {
          signature,
          account,
          state: response.state,
          data: response.data
        } : {
          signature,
          account
        };
        const nextAction = await action.chain(response.links.next, chainData);
        if (!nextAction || isPartialAction && !_optionalChain([selector, 'optionalCall', _60 => _60(nextAction)])) {
          dispatch({
            type: "FINISH" /* FINISH */,
            successMessage: response.message
          });
          _optionalChain([callbacks, 'access', _61 => _61.onActionComplete, 'optionalCall', _62 => _62(action, component, signature)]);
          return;
        }
        setAction(nextAction);
        dispatch({ type: "RESET" /* RESET */ });
        _optionalChain([callbacks, 'access', _63 => _63.onActionChain, 'optionalCall', _64 => _64(
          action,
          nextAction,
          component,
          response.type,
          signature
        )]);
      };
      if (response.type === "transaction" || !response.type) {
        const signResult = await adapter.signTransaction(
          response.transaction,
          context
        );
        if (!signResult || isSignTransactionError(signResult)) {
          dispatch({ type: "RESET" /* RESET */ });
          _optionalChain([callbacks, 'access', _65 => _65.onActionCancel, 'optionalCall', _66 => _66(
            action,
            component,
            "transaction-sign-cancel"
          )]);
          return;
        }
        const confirmationResult = await adapter.confirmTransaction(signResult.signature, context).then(() => ({ success: true })).catch((e) => ({ success: false, message: e.message }));
        if (!confirmationResult.success) {
          dispatch({
            type: "SOFT_RESET" /* SOFT_RESET */,
            errorMessage: _nullishCoalesce(confirmationResult.message, () => ( "Unknown error, please try again"))
          });
          _optionalChain([callbacks, 'access', _67 => _67.onActionError, 'optionalCall', _68 => _68(
            action,
            component,
            "transaction-confirmation-failed",
            signResult.signature
          )]);
          return;
        }
        await chain(signResult.signature);
        return;
      }
      if (response.type === "message") {
        const signResult = await adapter.signMessage(response.data, context);
        if (!signResult || isSignMessageError(signResult)) {
          dispatch({ type: "RESET" /* RESET */ });
          _optionalChain([callbacks, 'access', _69 => _69.onActionCancel, 'optionalCall', _70 => _70(action, component, "message-sign-cancel")]);
          return;
        }
        await chain(signResult.signature);
      }
      if (response.type === "post") {
        await chain();
        return;
      }
      if (response.type === "external-link") {
        if (isURL(response.externalLink)) {
          return {
            type: "external-link",
            data: {
              externalLink: response.externalLink
            },
            onNext: () => chain(),
            onCancel: () => chain()
          };
        }
        await chain();
        return;
      }
    } catch (e) {
      dispatch({
        type: "SOFT_RESET" /* SOFT_RESET */,
        errorMessage: _nullishCoalesce(e.message, () => ( "Unknown error, please try again"))
      });
      _optionalChain([callbacks, 'access', _71 => _71.onActionError, 'optionalCall', _72 => _72(action, component, "unknown-error")]);
    }
  };
  const disclaimer = _react.useMemo.call(void 0, () => {
    if (overallState === "malicious") {
      return {
        type: "blocked" /* BLOCKED */,
        ignorable: isPassingSecurityCheck,
        hidden: executionState.status !== "blocked" && executionState.status !== "checking-supportability",
        onSkip: () => dispatch({ type: "UNBLOCK" /* UNBLOCK */ })
      };
    }
    if (overallState === "unknown") {
      return {
        type: "unknown" /* UNKNOWN */,
        ignorable: isPassingSecurityCheck
      };
    }
    return null;
  }, [executionState.status, isPassingSecurityCheck, overallState]);
  const blinkCaption = _react.useMemo.call(void 0, () => {
    if (executionState.errorMessage) {
      return { type: "error", text: executionState.errorMessage };
    }
    if (executionState.successMessage) {
      return { type: "success", text: executionState.successMessage };
    }
    return null;
  }, [executionState.errorMessage, executionState.successMessage]);
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    Layout,
    {
      securityState: overallState,
      websiteUrl,
      websiteText,
      action,
      component: singleComponent,
      caption: blinkCaption,
      executionStatus: executionState.status,
      executingAction: executionState.executingAction,
      executeFn: execute,
      disclaimer,
      supportability,
      id: action.id
    }
  );
};

// src/hooks/useAction.ts


// src/hooks/useActionRegistryInterval.ts

function useActionsRegistryInterval() {
  const [isRegistryLoaded, setRegistryLoaded] = _react.useState.call(void 0, false);
  _react.useEffect.call(void 0, () => {
    const registry = ActionsRegistry.getInstance();
    registry.init().then(() => {
      setRegistryLoaded(true);
    });
    return () => {
      registry.stopRefresh();
    };
  }, [isRegistryLoaded]);
  return { isRegistryLoaded };
}

// src/hooks/useAction.ts
function useActionApiUrl(url) {
  const [apiUrl, setApiUrl] = _react.useState.call(void 0, null);
  const [isLoading, setIsLoading] = _react.useState.call(void 0, false);
  _react.useEffect.call(void 0, () => {
    let ignore = false;
    setIsLoading(true);
    unfurlUrlToActionApiUrl(new URL(url)).then((apiUrl2) => {
      if (ignore) {
        return;
      }
      setIsLoading(false);
      setApiUrl(apiUrl2);
    }).catch((e) => {
      console.error(
        "[@dialectlabs/blinks-core] Failed to unfurl action URL",
        e
      );
      if (!ignore) {
        setApiUrl(null);
      }
    }).finally(() => {
      if (!ignore) {
        setIsLoading(false);
      }
    });
    return () => {
      ignore = true;
    };
  }, [url]);
  return { actionApiUrl: apiUrl, isUrlLoading: isLoading };
}
function useAction({
  url,
  supportStrategy = defaultActionSupportStrategy
}) {
  const { isRegistryLoaded } = useActionsRegistryInterval();
  const { actionApiUrl, isUrlLoading } = useActionApiUrl(url);
  const [action, setAction] = _react.useState.call(void 0, null);
  const [isLoading, setIsLoading] = _react.useState.call(void 0, false);
  const [hasFetched, setHasFetched] = _react.useState.call(void 0, false);
  const fetchAction = _react.useCallback.call(void 0, () => {
    if (!actionApiUrl) {
      return () => {
      };
    }
    let ignore = false;
    setIsLoading(true);
    setHasFetched(false);
    Action.fetch(actionApiUrl, supportStrategy).then((action2) => {
      if (!ignore) {
        setIsLoading(false);
        setAction(action2);
        setHasFetched(true);
      }
    }).catch((e) => {
      if (!ignore) {
        console.error("[@dialectlabs/blinks-core] Failed to fetch action", e);
        setAction(null);
      }
    }).finally(() => {
      if (!ignore) {
        setIsLoading(false);
      }
    });
    return () => {
      ignore = true;
    };
  }, [actionApiUrl, supportStrategy]);
  _react.useEffect.call(void 0, () => {
    if (!isRegistryLoaded) {
      return;
    }
    const cleanup = fetchAction();
    return () => {
      cleanup();
    };
  }, [actionApiUrl, isRegistryLoaded]);
  _react.useEffect.call(void 0, () => {
    if (!action || !hasFetched) {
      return;
    }
    try {
      const updated = action.withUpdate({
        supportStrategy
      });
      setAction(updated);
    } catch (e) {
      console.error("[@dialectlabs/blinks-core] Failed to update action", e);
    }
  }, [supportStrategy, hasFetched]);
  return {
    action,
    isLoading: !isRegistryLoaded || isUrlLoading || isLoading,
    refresh: fetchAction
  };
}

// src/hooks/useBlinkList.ts

var useBlinkList = ({ id, wallet }) => {
  const [loading, setLoading] = _react.useState.call(void 0, false);
  const [data, setData] = _react.useState.call(void 0, );
  const refetch = _react.useCallback.call(void 0, () => {
    let ignore = false;
    setLoading(true);
    fetchBlinkList(id, wallet).then((data2) => {
      if (!ignore) {
        setData(data2);
      }
    }).finally(() => {
      if (!ignore) {
        setLoading(false);
      }
    });
    return () => {
      ignore = true;
    };
  }, [id, wallet]);
  _react.useEffect.call(void 0, () => {
    const cancel = refetch();
    return () => {
      cancel();
    };
  }, [refetch]);
  return {
    loading,
    refetch,
    data: _nullishCoalesce(_optionalChain([data, 'optionalAccess', _73 => _73.entries]), () => ( []))
  };
};
async function fetchBlinkList(id, wallet) {
  try {
    const urlObj = new URL(
      `https://registry.dial.to/v1/private/blink-lists/${id}`
    );
    if (wallet) {
      urlObj.searchParams.append("account", wallet);
    }
    const response = await fetch(urlObj, {
      method: "GET",
      headers: {
        Accept: "application/json",
        ...clientKey && { [BLINK_CLIENT_KEY_HEADER]: clientKey }
      }
    });
    if (!response.ok) {
      console.error(
        `[@dialectlabs/blinks] Failed to fetch blink list, response status: ${response.status}`
      );
      return {
        entries: []
      };
    }
    return await response.json();
  } catch (e) {
    console.error(`[@dialectlabs/blinks] Failed to fetch blink list`, e);
    return {
      entries: []
    };
  }
}

// src/hooks/useMetadata.ts

var useMetadata = ({ url, wallet }) => {
  const [loading, setLoading] = _react.useState.call(void 0, false);
  const [data, setData] = _react.useState.call(void 0, );
  const refetch = _react.useCallback.call(void 0, () => {
    let ignore = false;
    setLoading(true);
    fetchMetadata(url, wallet).then((data2) => {
      if (!ignore) {
        setData(data2);
      }
    }).finally(() => {
      if (!ignore) {
        setLoading(false);
      }
    });
    return () => {
      ignore = true;
    };
  }, [url, wallet]);
  _react.useEffect.call(void 0, () => {
    const cancel = refetch();
    return () => {
      cancel();
    };
  }, [refetch]);
  return {
    loading,
    refetch,
    data
  };
};
async function fetchMetadata(url, wallet) {
  try {
    const urlObj = new URL(url);
    if (wallet) {
      urlObj.searchParams.append("account", wallet);
    }
    const { url: proxyUrl2, headers: proxyHeaders } = proxifyMetadata(
      urlObj.toString()
    );
    const response = await fetch(proxyUrl2, {
      method: "GET",
      headers: {
        Accept: "application/json",
        ...proxyHeaders
      }
    });
    if (!response.ok) {
      console.error(
        `[@dialectlabs/blinks] Failed to fetch metadata, response status: ${response.status}`
      );
      return {
        rows: []
      };
    }
    return await response.json();
  } catch (e) {
    console.error(`[@dialectlabs/blinks] Failed to fetch metadata`, e);
    return {
      rows: []
    };
  }
}














































exports.AbstractActionComponent = AbstractActionComponent; exports.Action = Action; exports.ActionConfig = ActionConfig; exports.ActionsRegistry = ActionsRegistry; exports.ActionsURLMapper = ActionsURLMapper; exports.BASELINE_ACTION_BLOCKCHAIN_IDS = BASELINE_ACTION_BLOCKCHAIN_IDS; exports.BASELINE_ACTION_VERSION = BASELINE_ACTION_VERSION; exports.BLINK_CLIENT_KEY_HEADER = BLINK_CLIENT_KEY_HEADER; exports.BlinkContainer = BlinkContainer; exports.BlockchainIds = BlockchainIds; exports.ButtonActionComponent = ButtonActionComponent; exports.DEFAULT_SUPPORTED_BLOCKCHAIN_IDS = DEFAULT_SUPPORTED_BLOCKCHAIN_IDS; exports.DisclaimerType = DisclaimerType; exports.ExecutionType = ExecutionType; exports.FormActionComponent = FormActionComponent; exports.MAX_SUPPORTED_ACTION_VERSION = MAX_SUPPORTED_ACTION_VERSION; exports.MultiValueActionComponent = MultiValueActionComponent; exports.SOLANA_ACTION_PREFIX = SOLANA_ACTION_PREFIX; exports.SignMessageVerificationErrorType = SignMessageVerificationErrorType; exports.SingleValueActionComponent = SingleValueActionComponent; exports.checkSecurity = checkSecurity; exports.createSignMessageText = createSignMessageText; exports.defaultActionSupportStrategy = defaultActionSupportStrategy; exports.fetchBlinkList = fetchBlinkList; exports.fetchMetadata = fetchMetadata; exports.getExtendedActionState = getExtendedActionState; exports.getExtendedInterstitialState = getExtendedInterstitialState; exports.getExtendedWebsiteState = getExtendedWebsiteState; exports.isBlockchainSupported = isBlockchainSupported; exports.isInterstitial = isInterstitial; exports.isParameterSelectable = isParameterSelectable; exports.isPatternAllowed = isPatternAllowed; exports.isVersionSupported = isVersionSupported; exports.mergeActionStates = mergeActionStates; exports.parseSignMessageText = parseSignMessageText; exports.proxify = proxify; exports.proxifyImage = proxifyImage; exports.setClientKey = setClientKey; exports.setProxyUrl = setProxyUrl; exports.unfurlUrlToActionApiUrl = unfurlUrlToActionApiUrl; exports.useAction = useAction; exports.useActionsRegistryInterval = useActionsRegistryInterval; exports.useBlinkList = useBlinkList; exports.useMetadata = useMetadata; exports.verifySignMessageData = verifySignMessageData;
